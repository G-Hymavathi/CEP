use std::io;

struct Student {
    name: String,
    email: String,
    phno: String,
    id: u32,
}

fn main() {
    let mut students: Vec<Student> = Vec::new();

    students.push(Student {
        name: String::from("Harsha Kumar"),
        email: String::from("Harsha@gmail.com"),
        phno: String::from("1234567890"),
        id: 1,
    });

    students.push(Student {
        name: String::from("Ujjwal Sharma"),
        email: String::from("ujjwal.bhai@gmail.com"),
        phno: String::from("2345678901"),
        id: 2,
    });

    students.push(Student {
        name: String::from("Pavani "),
        email: String::from("pavani@gmail.com"),
        phno: String::from("3456789012"),
        id: 3,
    });
    students.push(Student {
        name: String::from("Sourabh jain"),
        email: String::from("sourabh.jain@gmail.com"),
        phno: String::from("4567890123"),
        id: 4,
    });
    students.push(Student {
        name: String::from("Hyma yadav"),
        email: String::from("yadav@gamail.com"),
        phno: String::from("5678901234"),
        id: 5,
    });
for i in 1..=2{
    println!("Enter an index to view student details:");
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Failed to read line");
    let index: usize = input.trim().parse().expect("Invalid input. Please enter a valid index.");
    

    match students.get(index) {
        Some(student) => {
            println!("Student {} details:", index);
            println!("Name: {}", student.name);
            println!("Email: {}", student.email);
            println!("Phone: {}", student.phno);
            println!("ID: {}", student.id);
        }
        None => {
            println!("Error: Student with index not found.");
        }
    }}
}
